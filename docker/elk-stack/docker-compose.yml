version: '3.4'

networks:
  elk-net:
    driver: bridge

services:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${TAG}
    container_name: elasticsearch
    restart: always
    environment:
      - node.name=elasticsearch-node-01
      - discovery.type=single-node
      - cluster.name=elasticsearch-cluster
    ports:
      - "19200:9200"
      - "19300:9300"
    healthcheck:
      test: if [[ $${ELASTICSEARCH_STATUS} -eq 200 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - elk-net

  kibana:
    image: docker.elastic.co/kibana/kibana:${TAG}
    container_name: kibana
    restart: always
    ports:
      - "15601:5601"
    depends_on:
      - elasticsearch
    networks:
      - elk-net
    healthcheck:
      test: if [[ $${KIBANA_STATUS} -eq 200 ]]; then echo 0; else echo 1; fi #La variable no la interpola Compose si no la ejecuci√≥n del test
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    image: docker.elastic.co/beats/filebeat:${TAG}
    container_name: filebeat
    restart: always
    volumes:
      - ./log:/mnt/log/
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    depends_on:
      - elasticsearch
      - kibana
    healthcheck:
      test: filebeat test config
      interval: 30s
      timeout: 15s
      retries: 5
    networks:
      - elk-net
      
  logstash:
    image: docker.elastic.co/logstash/logstash:${TAG}
    container_name: logstash
    restart: always
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    ports:
      - "15000:5000"  
    healthcheck:
      test: bin/logstash -t
      interval: 60s
      timeout: 50s
      retries: 5
    networks:
      - elk-net
